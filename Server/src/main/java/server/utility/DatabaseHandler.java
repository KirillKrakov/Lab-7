package server.utility;

import common.utility.Outputer;
import org.apache.logging.log4j.core.jmx.Server;
import server.ServerApp;

import java.sql.*;

public class DatabaseHandler {
    // table names
    public static final String LABWORK_TABLE = "labwork";
    public static final String USER_TABLE = "owner";
    public static final String COORDINATES_TABLE = "coordinates";
    public static final String AUTHOR_TABLE = "author";
    // LABWORK_TABLE column names
    public static final String LABWORK_TABLE_ID_COLUMN = "id";
    public static final String LABWORK_TABLE_NAME_COLUMN = "name";
    public static final String LABWORK_TABLE_CREATION_DATE_COLUMN = "creation_date";
    public static final String LABWORK_TABLE_MINIMAL_POINT_COLUMN = "minimal_point";
    public static final String LABWORK_TABLE_PERSONAL_QUALITIES_MINIMUM_COLUMN = "personal_qualities_minimum";
    public static final String LABWORK_TABLE_AVERAGE_POINT_COLUMN = "average_point";
    public static final String LABWORK_TABLE_DIFFICULTY_COLUMN = "difficulty";
    public static final String LABWORK_TABLE_AUTHOR_ID_COLUMN = "author_id";
    public static final String LABWORK_TABLE_USER_ID_COLUMN = "user_id";
    // USER_TABLE column names
    public static final String USER_TABLE_ID_COLUMN = "id";
    public static final String USER_TABLE_USERNAME_COLUMN = "username";
    public static final String USER_TABLE_PASSWORD_COLUMN = "password";
    // COORDINATES_TABLE column names
    public static final String COORDINATES_TABLE_ID_COLUMN = "id";
    public static final String COORDINATES_TABLE_LABWORK_ID_COLUMN = "labwork_id";
    public static final String COORDINATES_TABLE_X_COLUMN = "x";
    public static final String COORDINATES_TABLE_Y_COLUMN = "y";
    // AUTHOR_TABLE column names
    public static final String AUTHOR_TABLE_ID_COLUMN = "id";
    public static final String AUTHOR_TABLE_NAME_COLUMN = "name";
    public static final String AUTHOR_TABLE_BIRTHDAY_COLUMN = "birthday";
    public static final String AUTHOR_TABLE_PASSPORT_ID_COLUMN = "passport_id";

    private final String JDBC_DRIVER = "org.postgresql.Driver";

    private String url;
    private String user;
    private String password;
    private Connection connection;

    public DatabaseHandler(String url, String user, String password) {
        this.url = url;
        this.user = user;
        this.password = password;

        connectToDataBase();
    }

    /**
     * A class for connect to database.
     */
    private void connectToDataBase() {
        try {
            Class.forName(JDBC_DRIVER);
            connection = DriverManager.getConnection(url, user, password);
            //connection = DriverManager.getConnection(url, "root", "Qx349h0i@");
            Outputer.println("Соединение с базой данных установлено.");
            ServerApp.logger.info("Соединение с базой данных установлено.");
        } catch (SQLException exception) {
            Outputer.printerror("Произошла ошибка при подключении к базе данных!");
            ServerApp.logger.error("Произошла ошибка при подключении к базе данных!");
        } catch (ClassNotFoundException exception) {
            Outputer.printerror("Драйвер управления базой дынных не найден!");
            ServerApp.logger.error("Драйвер управления базой дынных не найден!");
        }
    }

    /**
     * @param sqlStatement SQL statement to be prepared.
     * @param generateKeys Is keys needed to be generated.
     * @return Pprepared statement.
     * @throws SQLException When there's exception inside.
     */
    public PreparedStatement getPreparedStatement(String sqlStatement, boolean generateKeys) throws SQLException {
        PreparedStatement preparedStatement;
        try {
            if (connection == null) throw new SQLException();
            int autoGeneratedKeys = generateKeys ? Statement.RETURN_GENERATED_KEYS : Statement.NO_GENERATED_KEYS;
            preparedStatement = connection.prepareStatement(sqlStatement, autoGeneratedKeys);
            //App.logger.info("Подготовлен SQL запрос '" + sqlStatement + "'.");
            return preparedStatement;
        } catch (SQLException exception) {
            //App.logger.error("Произошла ошибка при подготовке SQL запроса '" + sqlStatement + "'.");
            if (connection == null) ServerApp.logger.error("Соединение с базой данных не установлено!");
            throw new SQLException(exception);
        }
    }

    /**
     * Close prepared statement.
     *
     * @param sqlStatement SQL statement to be closed.
     */
    public void closePreparedStatement(PreparedStatement sqlStatement) {
        if (sqlStatement == null) return;
        try {
            sqlStatement.close();
            //App.logger.info("Закрыт SQL запрос '" + sqlStatement + "'.");
        } catch (SQLException exception) {
            //App.logger.error("Произошла ошибка при закрытии SQL запроса '" + sqlStatement + "'.");
        }
    }

    /**
     * Close connection to database.
     */
    public void closeConnection() {
        if (connection == null) return;
        try {
            connection.close();
            Outputer.println("Соединение с базой данных разорвано.");
            ServerApp.logger.info("Соединение с базой данных разорвано.");
        } catch (SQLException exception) {
            Outputer.printerror("Произошла ошибка при разрыве соединения с базой данных!");
            ServerApp.logger.error("Произошла ошибка при разрыве соединения с базой данных!");
        }
    }

    public void setCommitMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(false);
        } catch (SQLException exception) {
            ServerApp.logger.error("Произошла ошибка при установлении режима транзакции базы данных!");
        }
    }

    /**
     * Set normal mode of database.
     */
    public void setNormalMode() {
        try {
            if (connection == null) throw new SQLException();
            connection.setAutoCommit(true);
        } catch (SQLException exception) {
            ServerApp.logger.error("Произошла ошибка при установлении нормального режима базы данных!");
        }
    }

    /**
     * Commit database status.
     */
    public void commit() {
        try {
            if (connection == null) throw new SQLException();
            connection.commit();
        } catch (SQLException exception) {
            ServerApp.logger.error("Произошла ошибка при подтверждении нового состояния базы данных!");
        }
    }

    /**
     * Roll back database status.
     */
    public void rollback() {
        try {
            if (connection == null) throw new SQLException();
            connection.rollback();
        } catch (SQLException exception) {
            ServerApp.logger.error("Произошла ошибка при возврате исходного состояния базы данных!");
        }
    }

    /**
     * Set save point of database.
     */
    public void setSavepoint() {
        try {
            if (connection == null) throw new SQLException();
            connection.setSavepoint();
        } catch (SQLException exception) {
            ServerApp.logger.error("Произошла ошибка при сохранении состояния базы данных!");
        }
    }
}
